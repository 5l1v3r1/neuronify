/*!
    \page index.html

    \title Neuronify documentation

    Neuronify is an educational app for studying neural networks.
    The engine is based on an integrate-and-fire model.
    This documentation provides information about how you can obtain the
    program and how it is structured.

    \image images/neuronify-0.92.png "Screenshot of Neuronify 0.91"


    \section1 Getting started

    Neuronify can be downloaded for multiple platforms.
    Mobile versions of Neuronify will be available soon in Google Play and
    Apple App Store.

    For Linux, Mac and Windows users, Neuronify can be downloaded here:

    \list
        \li \l{https://github.com/CINPLA/neuronify/releases}
              {Download Neuronify}
    \endlist

    For Linux users, the application must be built from source.

    A short set of exercises that will help you get started can be found here:

    \list
        \li \l{https://github.com/CINPLA/presentations/blob/master/neuronify-exercises/exercises.pdf}
              {Exercises to get started with Neuronify}
    \endlist

    \section1 Neuroscience theory

    Neuronify is based on an integrate-and-fire model of neurons.
    To understand this model, we have outlined some basic theory
    of computational neuroscience in the following documents:

	\list
        \li \l{General neuroscience}
	    \li \l{Integrate-and-fire model}
	    \li \l{Adaptive neurons}
	    \li \l{Poisson Distributed Spike Generator}
    	\li \l{Receptive field}
	\endlist

    \section1 Development and technical details

    Neuronify is written in C++ and QML using the \l{http://qt.io}{Qt Framework}.
    The GUI is written in QML, while the core parts of the engine that performs
    the time integration of the neural network is written in C++.
    However, several of the network elements and neurons used in Neuronify are
    written as QML objects.

    \section2 Core

    The core of Neuronify consists of a small set of GUI and engine classes.
    At the heart of the GUI is the \l{Neuronify} QML type that organizes all
    the visual items and the holds a reference to \l{GraphEngine}.
    Each item in the network is controlled by the \l{GraphEngine}.
    This is a C++ class that holds a list of nodes and their connections
    through edges.

    The nodes of the network are split into three parts: \l{NodeBase},
    \l{NodeEngine} and \l{Node}.
    The former two are C++ classes, while the latter is a QML type.

    In principle, \l NodeBase and \l Node could have been the one and same
    C++ class.
    The reason they are split up is because some features of \l Node are
    defined in QML, such as a \l MouseArea with dragging.
    Since \l NodeEngine, \l Edge and \l GraphEngine are C++ classes, they
    cannot have type-safe pointers to a \l Node object because this will be
    defined first once the application has started.
    That is why they instead refer to the C++ type \l NodeBase.
    In the future, this may change and all features of \l Node may be
    incorporated in a C++ class.

    \annotatedlist neuronify-core

    \section2 Neurons

    Neurons are defined by subclassing the \l Neuron QML Type and adding
    a \l NeuronEngine.
    To change the behavior of a \l NeuronEngine, \l Current objects may be
    added as children to it.
    The \l NeuronEngine will iterate all its children and sum their currents.

    \annotatedlist neuronify-neurons

    \section2 Generators

    Generators are used to feed the network with automatic input.

    \annotatedlist neuronify-generators

    \section2 Meters

    Meters can be used to measure the state of the neurons.

    \annotatedlist neuronify-meters

    \section2 Sensors

    Sensors are used to get information from the outside world to the app.

    \annotatedlist neuronify-sensors

    \section2 Tools

    The following classes are used as tools to aid other types.

    \annotatedlist neuronify-utils

    \section2 Complete list of items

    For a comprehensive list, see \l{All Classes} and \l{Neuronify QML Types}

    \section1 Future development

    Neuronify is in active development.
    Some target features that we wish to include in the future are:

    \list
        \li Long-term learning schemes such as long-term potentiation.
        \li User-generated neurons and items (written as QML plugins).
        \li Possibility to share saved simulations.
        \li Exercises built into the app for easier implementation in courses.
        \li Positioning features to mimic grid cells.
    \endlist
*/


/*!
    \page classes.html
    \title All Classes

    \brief If you know the name of the class you want, find it here.

    This is a list of all documented classes in Neuronify.

    \generatelist{classesbymodule Neuronify}
*/

/*!
    \title Neuronify QML Types

    \brief If you know the name of the QML Type, find it here

    This is a list of all documented QML Types in Neuronify.

    \qmlmodule Neuronify
*/

/*!
    \group neuronify-io

    \title Input/Output
    \ingroup classlists

    These classes are used for handling input and output of files.
*/
